"use strict";

var path = require("path");

var tap = require("tap");

var init = require("../init");
var Source = init.Source;

tap.test("getURL", { autoend: true }, function (t) {
    var source = init.getSource();
    t.equal(source.getURL("en"), "/artworks/source/test", "Check 'en' URL");

    t.equal(source.getURL("de"), "/artworks/source/test?lang=de", "Check 'de' URL");
});

tap.test("getDirBase", { autoend: true }, function (t) {
    var source = init.getSource();
    var file = path.resolve(process.cwd(), "data/test");
    t.equal(source.getDirBase(), file);
});

tap.test("getFullName", { autoend: true }, function (t) {
    var source = init.getSource();
    t.equal(source.getFullName(), "Test Source");
});

tap.test("getShortName", { autoend: true }, function (t) {
    var source = init.getSource();
    t.equal(source.getShortName(), "Test");
});

tap.test("getConverter", { autoend: true }, function (t) {
    var source = init.getSource();
    t.ok(source.getConverter().processFiles);
});

tap.test("getExpectedFiles", { autoend: true }, function (t) {
    var source = init.getSource();
    t.same(source.getExpectedFiles(), ["Upload a JSON file (.json) containing metadata."]);
});

tap.test("cacheTotals", function (t) {
    var source = init.getSource();
    source.cacheTotals(function () {
        t.equal(source.numRecords, 4);
        t.equal(source.numImages, 4);
        t.end();
    });
});

tap.test("Source.cacheSources", function (t) {
    Source.cacheSources(function (err, sources) {
        t.equal(sources[0].numRecords, 4);
        t.equal(sources[1].numRecords, 0);
        t.end();
    });
});

tap.test("Source.getSource", function (t) {
    var source = init.getSource();
    Source.cacheSources(function () {
        t.equal(Source.getSource("test"), source);
        t.notEqual(Source.getSource("test2"), source);
        t.throws(function () {
            return Source.getSource("unknown");
        }, new Error("Source not found: unknown"));
        t.end();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0cy9zY2hlbWFzL1NvdXJjZS5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsInRhcCIsImluaXQiLCJTb3VyY2UiLCJ0ZXN0IiwiYXV0b2VuZCIsInQiLCJzb3VyY2UiLCJnZXRTb3VyY2UiLCJlcXVhbCIsImdldFVSTCIsImZpbGUiLCJyZXNvbHZlIiwicHJvY2VzcyIsImN3ZCIsImdldERpckJhc2UiLCJnZXRGdWxsTmFtZSIsImdldFNob3J0TmFtZSIsIm9rIiwiZ2V0Q29udmVydGVyIiwicHJvY2Vzc0ZpbGVzIiwic2FtZSIsImdldEV4cGVjdGVkRmlsZXMiLCJjYWNoZVRvdGFscyIsIm51bVJlY29yZHMiLCJudW1JbWFnZXMiLCJlbmQiLCJjYWNoZVNvdXJjZXMiLCJlcnIiLCJzb3VyY2VzIiwibm90RXF1YWwiLCJ0aHJvd3MiLCJFcnJvciJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxPQUFPQyxRQUFRLE1BQVIsQ0FBYjs7QUFFQSxJQUFNQyxNQUFNRCxRQUFRLEtBQVIsQ0FBWjs7QUFFQSxJQUFNRSxPQUFPRixRQUFRLFNBQVIsQ0FBYjtBQUNBLElBQU1HLFNBQVNELEtBQUtDLE1BQXBCOztBQUVBRixJQUFJRyxJQUFKLENBQVMsUUFBVCxFQUFtQixFQUFDQyxTQUFTLElBQVYsRUFBbkIsRUFBb0MsVUFBQ0MsQ0FBRCxFQUFPO0FBQ3ZDLFFBQU1DLFNBQVNMLEtBQUtNLFNBQUwsRUFBZjtBQUNBRixNQUFFRyxLQUFGLENBQVFGLE9BQU9HLE1BQVAsQ0FBYyxJQUFkLENBQVIsRUFDSSx1QkFESixFQUM2QixnQkFEN0I7O0FBR0FKLE1BQUVHLEtBQUYsQ0FBUUYsT0FBT0csTUFBUCxDQUFjLElBQWQsQ0FBUixFQUNJLCtCQURKLEVBQ3FDLGdCQURyQztBQUVILENBUEQ7O0FBU0FULElBQUlHLElBQUosQ0FBUyxZQUFULEVBQXVCLEVBQUNDLFNBQVMsSUFBVixFQUF2QixFQUF3QyxVQUFDQyxDQUFELEVBQU87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ZXNDb250ZW50IjpbImNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcblxuY29uc3QgdGFwID0gcmVxdWlyZShcInRhcFwiKTtcblxuY29uc3QgaW5pdCA9IHJlcXVpcmUoXCIuLi9pbml0XCIpO1xuY29uc3QgU291cmNlID0gaW5pdC5Tb3VyY2U7XG5cbnRhcC50ZXN0KFwiZ2V0VVJMXCIsIHthdXRvZW5kOiB0cnVlfSwgKHQpID0+IHtcbiAgICBjb25zdCBzb3VyY2UgPSBpbml0LmdldFNvdXJjZSgpO1xuICAgIHQuZXF1YWwoc291cmNlLmdldFVSTChcImVuXCIpLFxuICAgICAgICBcIi9hcnR3b3Jrcy9zb3VyY2UvdGVzdFwiLCBcIkNoZWNrICdlbicgVVJMXCIpO1xuXG4gICAgdC5lcXVhbChzb3VyY2UuZ2V0VVJMKFwiZGVcIiksXG4gICAgICAgIFwiL2FydHdvcmtzL3NvdXJjZS90ZXN0P2xhbmc9ZGVcIiwgXCJDaGVjayAnZGUnIFVSTFwiKTtcbn0pO1xuXG50YXAudGVzdChcImdldERpckJhc2VcIiwge2F1dG9lbmQ6IHRydWV9LCAodCkgPT4ge1xuICAgIGNvbnN0IHNvdXJjZSA9IGluaXQuZ2V0U291cmNlKCk7XG4gICAgY29uc3QgZmlsZSA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBcImRhdGEvdGVzdFwiKTtcbiAgICB0LmVxdWFsKHNvdXJjZS5nZXREaXJCYXNlKCksIGZpbGUpO1xufSk7XG5cbnRhcC50ZXN0KFwiZ2V0RnVsbE5hbWVcIiwge2F1dG9lbmQ6IHRydWV9LCAodCkgPT4ge1xuICAgIGNvbnN0IHNvdXJjZSA9IGluaXQuZ2V0U291cmNlKCk7XG4gICAgdC5lcXVhbChzb3VyY2UuZ2V0RnVsbE5hbWUoKSwgXCJUZXN0IFNvdXJjZVwiKTtcbn0pO1xuXG50YXAudGVzdChcImdldFNob3J0TmFtZVwiLCB7YXV0b2VuZDogdHJ1ZX0sICh0KSA9PiB7XG4gICAgY29uc3Qgc291cmNlID0gaW5pdC5nZXRTb3VyY2UoKTtcbiAgICB0LmVxdWFsKHNvdXJjZS5nZXRTaG9ydE5hbWUoKSwgXCJUZXN0XCIpO1xufSk7XG5cbnRhcC50ZXN0KFwiZ2V0Q29udmVydGVyXCIsIHthdXRvZW5kOiB0cnVlfSwgKHQpID0+IHtcbiAgICBjb25zdCBzb3VyY2UgPSBpbml0LmdldFNvdXJjZSgpO1xuICAgIHQub2soc291cmNlLmdldENvbnZlcnRlcigpLnByb2Nlc3NGaWxlcyk7XG59KTtcblxudGFwLnRlc3QoXCJnZXRFeHBlY3RlZEZpbGVzXCIsIHthdXRvZW5kOiB0cnVlfSwgKHQpID0+IHtcbiAgICBjb25zdCBzb3VyY2UgPSBpbml0LmdldFNvdXJjZSgpO1xuICAgIHQuc2FtZShzb3VyY2UuZ2V0RXhwZWN0ZWRGaWxlcygpLCBbXG4gICAgICAgIFwiVXBsb2FkIGEgSlNPTiBmaWxlICguanNvbikgY29udGFpbmluZyBtZXRhZGF0YS5cIixcbiAgICBdKTtcbn0pO1xuXG50YXAudGVzdChcImNhY2hlVG90YWxzXCIsICh0KSA9PiB7XG4gICAgY29uc3Qgc291cmNlID0gaW5pdC5nZXRTb3VyY2UoKTtcbiAgICBzb3VyY2UuY2FjaGVUb3RhbHMoKCkgPT4ge1xuICAgICAgICB0LmVxdWFsKHNvdXJjZS5udW1SZWNvcmRzLCA0KTtcbiAgICAgICAgdC5lcXVhbChzb3VyY2UubnVtSW1hZ2VzLCA0KTtcbiAgICAgICAgdC5lbmQoKTtcbiAgICB9KTtcbn0pO1xuXG50YXAudGVzdChcIlNvdXJjZS5jYWNoZVNvdXJjZXNcIiwgKHQpID0+IHtcbiAgICBTb3VyY2UuY2FjaGVTb3VyY2VzKChlcnIsIHNvdXJjZXMpID0+IHtcbiAgICAgICAgdC5lcXVhbChzb3VyY2VzWzBdLm51bVJlY29yZHMsIDQpO1xuICAgICAgICB0LmVxdWFsKHNvdXJjZXNbMV0ubnVtUmVjb3JkcywgMCk7XG4gICAgICAgIHQuZW5kKCk7XG4gICAgfSk7XG59KTtcblxudGFwLnRlc3QoXCJTb3VyY2UuZ2V0U291cmNlXCIsICh0KSA9PiB7XG4gICAgY29uc3Qgc291cmNlID0gaW5pdC5nZXRTb3VyY2UoKTtcbiAgICBTb3VyY2UuY2FjaGVTb3VyY2VzKCgpID0+IHtcbiAgICAgICAgdC5lcXVhbChTb3VyY2UuZ2V0U291cmNlKFwidGVzdFwiKSwgc291cmNlKTtcbiAgICAgICAgdC5ub3RFcXVhbChTb3VyY2UuZ2V0U291cmNlKFwidGVzdDJcIiksIHNvdXJjZSk7XG4gICAgICAgIHQudGhyb3dzKCgpID0+IFNvdXJjZS5nZXRTb3VyY2UoXCJ1bmtub3duXCIpLFxuICAgICAgICAgICAgbmV3IEVycm9yKFwiU291cmNlIG5vdCBmb3VuZDogdW5rbm93blwiKSk7XG4gICAgICAgIHQuZW5kKCk7XG4gICAgfSk7XG59KTtcbiJdfQ==