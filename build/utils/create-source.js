"use strict";

var fs = require("fs");
var path = require("path");

var rl = require("readline-sync");

var models = require("../lib/models");
var options = require("../lib/options");

module.exports = function (args, callback) {
    var types = Object.keys(options.types);

    var _id = rl.question("Source ID (e.g. frick): ");
    var name = rl.question("Full Name (e.g. Frick Library): ");
    var shortName = rl.question("Short Name (e.g. Frick): ");
    var url = rl.question("URL (http://...): ");
    var type = rl.question("Data Type (" + types.join(", ") + "): ");
    var converter = rl.question("Data Convertor [default]: ", {
        defaultInput: "default"
    });

    var Source = models("Source");
    var source = new Source({
        _id: _id,
        name: name,
        shortName: shortName,
        url: url,
        type: type,
        converter: converter
    });

    source.save(function (err) {
        if (err) {
            return callback(err);
        }

        // Create directories to hold images
        var dir = source.getDirBase();
        fs.mkdirSync(dir);
        fs.mkdirSync(path.join(dir, "images"));
        fs.mkdirSync(path.join(dir, "scaled"));
        fs.mkdirSync(path.join(dir, "thumbs"));

        console.log("Source Created: " + _id);

        callback();
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9jcmVhdGUtc291cmNlLmpzIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsInBhdGgiLCJybCIsIm1vZGVscyIsIm9wdGlvbnMiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXJncyIsImNhbGxiYWNrIiwidHlwZXMiLCJPYmplY3QiLCJrZXlzIiwiX2lkIiwicXVlc3Rpb24iLCJuYW1lIiwic2hvcnROYW1lIiwidXJsIiwidHlwZSIsImpvaW4iLCJjb252ZXJ0ZXIiLCJkZWZhdWx0SW5wdXQiLCJTb3VyY2UiLCJzb3VyY2UiLCJzYXZlIiwiZXJyIiwiZGlyIiwiZ2V0RGlyQmFzZSIsIm1rZGlyU3luYyIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsS0FBS0MsUUFBUSxJQUFSLENBQVg7QUFDQSxJQUFNQyxPQUFPRCxRQUFRLE1BQVIsQ0FBYjs7QUFFQSxJQUFNRSxLQUFLRixRQUFRLGVBQVIsQ0FBWDs7QUFFQSxJQUFNRyxTQUFTSCxRQUFRLGVBQVIsQ0FBZjtBQUNBLElBQU1JLFVBQVVKLFFBQVEsZ0JBQVIsQ0FBaEI7O0FBRUFLLE9BQU9DLE9BQVAsR0FBaUIsVUFBQ0MsSUFBRCxFQUFPQyxRQUFQLEVBQW9CO0FBQ2pDLFFBQU1DLFFBQVFDLE9BQU9DLElBQVAsQ0FBWVAsUUFBUUssS0FBcEIsQ0FBZDs7QUFFQSxRQUFNRyxNQUFNVixHQUFHVyxRQUFILENBQVksMEJBQVosQ0FBWjtBQUNBLFFBQU1DLE9BQU9aLEdBQUdXLFFBQUgsQ0FBWSxrQ0FBWixDQUFiO0FBQ0EsUUFBTUUsWUFBWWIsR0FBR1csUUFBSCxDQUFZLDJCQUFaLENBQWxCO0FBQ0EsUUFBTUcsTUFBTWQsR0FBR1csUUFBSCxDQUFZLG9CQUFaLENBQVo7QUFDQSxRQUFNSSxPQUFPZixHQUFHVyxRQUFILGlCQUEwQkosTUFBTVMsSUFBTixDQUFXLElBQVgsQ0FBMUIsU0FBYjtBQUNBLFFBQU1DLFlBQVlqQixHQUFHVyxRQUFILENBQVksNEJBQVosRUFBMEM7QUFDeERPLHNCQUFjO0FBRDBDLEtBQTFDLENBQWxCOztBQUlBLFFBQU1DLFNBQVNsQixPQUFPLFFBQVAsQ0FBZjtBQUNBLFFBQU1tQixTQUFTLElBQUlELE1BQUosQ0FBVztBQUN0QlQsZ0JBRHNCO0FBRXRCRSxrQkFGc0I7QUFHdEJDLDRCQUhzQjtBQUl0QkMsZ0JBSnNCO0FBS3RCQyxrQkFMc0I7QUFNdEJFO0FBTnNCLEtBQVgsQ0FBZjs7QUFTQUcsV0FBT0MsSUFBUCxDQUFZLFVBQUNDLEdBQUQsRUFBUztBQUNqQixZQUFJQSxHQUFKLEVBQVM7QUFDTCxtQkFBT2hCLFNBQVNnQixHQUFULENBQVA7QUFDSDs7QUFFRDtBQUNBLFlBQU1DLE1BQU1ILE9BQU9JLFVBQVAsRUFBWjtBQUNBM0IsV0FBRzRCLFNBQUgsQ0FBYUYsR0FBYjtBQUNBMUIsV0FBRzRCLFNBQUgsQ0FBYTFCLEtBQUtpQixJQUFMLENBQVVPLEdBQVYsRUFBZSxRQUFmLENBQWI7QUFDQTFCLFdBQUc0QixTQUFILENBQWExQixLQUFLaUIsSUFBTCxDQUFVTyxHQUFWLEVBQWUsUUFBZixDQUFiO0FBQ0ExQixXQUFHNEIsU0FBSCxDQUFhMUIsS0FBS2lCLElBQUwsQ0FBVU8sR0FBVixFQUFlLFFBQWYsQ0FBYjs7QUFFQUcsZ0JBQVFDLEdBQVIsc0JBQStCakIsR0FBL0I7O0FBRUFKO0FBQ0gsS0FmRDtBQWdCSCxDQXRDRCIsImZpbGUiOiJjcmVhdGUtc291cmNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5cbmNvbnN0IHJsID0gcmVxdWlyZShcInJlYWRsaW5lLXN5bmNcIik7XG5cbmNvbnN0IG1vZGVscyA9IHJlcXVpcmUoXCIuLi9saWIvbW9kZWxzXCIpO1xuY29uc3Qgb3B0aW9ucyA9IHJlcXVpcmUoXCIuLi9saWIvb3B0aW9uc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoYXJncywgY2FsbGJhY2spID0+IHtcbiAgICBjb25zdCB0eXBlcyA9IE9iamVjdC5rZXlzKG9wdGlvbnMudHlwZXMpO1xuXG4gICAgY29uc3QgX2lkID0gcmwucXVlc3Rpb24oXCJTb3VyY2UgSUQgKGUuZy4gZnJpY2spOiBcIik7XG4gICAgY29uc3QgbmFtZSA9IHJsLnF1ZXN0aW9uKFwiRnVsbCBOYW1lIChlLmcuIEZyaWNrIExpYnJhcnkpOiBcIik7XG4gICAgY29uc3Qgc2hvcnROYW1lID0gcmwucXVlc3Rpb24oXCJTaG9ydCBOYW1lIChlLmcuIEZyaWNrKTogXCIpO1xuICAgIGNvbnN0IHVybCA9IHJsLnF1ZXN0aW9uKFwiVVJMIChodHRwOi8vLi4uKTogXCIpO1xuICAgIGNvbnN0IHR5cGUgPSBybC5xdWVzdGlvbihgRGF0YSBUeXBlICgke3R5cGVzLmpvaW4oXCIsIFwiKX0pOiBgKTtcbiAgICBjb25zdCBjb252ZXJ0ZXIgPSBybC5xdWVzdGlvbihcIkRhdGEgQ29udmVydG9yIFtkZWZhdWx0XTogXCIsIHtcbiAgICAgICAgZGVmYXVsdElucHV0OiBcImRlZmF1bHRcIixcbiAgICB9KTtcblxuICAgIGNvbnN0IFNvdXJjZSA9IG1vZGVscyhcIlNvdXJjZVwiKTtcbiAgICBjb25zdCBzb3VyY2UgPSBuZXcgU291cmNlKHtcbiAgICAgICAgX2lkLFxuICAgICAgICBuYW1lLFxuICAgICAgICBzaG9ydE5hbWUsXG4gICAgICAgIHVybCxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgY29udmVydGVyLFxuICAgIH0pO1xuXG4gICAgc291cmNlLnNhdmUoKGVycikgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBkaXJlY3RvcmllcyB0byBob2xkIGltYWdlc1xuICAgICAgICBjb25zdCBkaXIgPSBzb3VyY2UuZ2V0RGlyQmFzZSgpO1xuICAgICAgICBmcy5ta2RpclN5bmMoZGlyKTtcbiAgICAgICAgZnMubWtkaXJTeW5jKHBhdGguam9pbihkaXIsIFwiaW1hZ2VzXCIpKTtcbiAgICAgICAgZnMubWtkaXJTeW5jKHBhdGguam9pbihkaXIsIFwic2NhbGVkXCIpKTtcbiAgICAgICAgZnMubWtkaXJTeW5jKHBhdGguam9pbihkaXIsIFwidGh1bWJzXCIpKTtcblxuICAgICAgICBjb25zb2xlLmxvZyhgU291cmNlIENyZWF0ZWQ6ICR7X2lkfWApO1xuXG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSk7XG59O1xuIl19